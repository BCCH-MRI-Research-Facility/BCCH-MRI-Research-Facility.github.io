---
title: "EEG-fMRI Ballistocardiogram Cleaning (Rodriguez method)"
description: "Reversed engineered code from Rodriguez (2016) for removal of the ballistocardiogram artifacts from EEG-fMRI data when the ECG fails to give a good signal. This code requires Matlab and the Signal Processing Toolbox."
author: "Lynne Williams"
date: "2018/07/11"
date-modified: "2024/12/03"
highlight-style: github
categories:
    - eeg-fmri
    - code
    - matlab
    - preprocessing
    - eeg
---

## Please cite Rodriguez (2016)

Reversed engineered code from Rodriguez (2016) for removal of the ballistocardiogram artifacts from EEG-fMRI data when the ECG fails to give a good signal. Cameron's dissertation is included in this repository for transparency's sake. This code requires Matlab and the Signal Processing Toolbox.

If you use this code, please cite:

Rodriguez, Cameron. (2016). [Improvements to Simultaneous Electroencepalography-Functional Magnetic Resonance Imaging and Electroencepalographic Source Localization](https://escholarship.org/uc/item/3gg3z2q6). PhD Thesis for the University of California, Los Angeles.

## Removing the Ballistocardiogram with no ECG

1. Remove the MR gradient signal from the EEG using your favourite software (here we used FIMRIB's EEG tools [Niazy et al., 2005] in EEGLAB [Delorme & Makeig, 2004] saved as a .set file).

2. Set up the paths to your data and change directories into the `srcdir` directory. Change the path to suit your dataset.

```{.matlab}
srcdir = fullfile('/Volumes', 'Lynne_32G', 'EEG', 'src');
cd(scrdir)
```

3. Load the EEG run. Change to suit your dataset.

```{.matlab}
EEG = load('-mat', [srcdir 'BHBMEG007_20210511_040344_GR.set']);
```

4. Get the sampling rate. In the `.set` file, it is named `srate` and is an embedded structure of `EEG`. This may differ depending on the software used to remove the MR gradient noise.

```{.matlab}
Fs = EEG.srate
```

5. Remove remaining gradient artifact at beginning and cut off part when net was removed at the end by cropping the signal.

6. Restrict signal to channels included in Rodriguez 2016 for ballistocardiogram estimation (FT9 [EGI 67], TP9 [EGI 94], T7 [EGI 69], P7 [EGI 96], FT10 [EGI 219], TP10 [EGI 190], T8 [EGI 202], P8 [EGI 179]).

```{.matlab}
channels2keep = [67 94 69 96 219 190 202 179];
start = round(EEG.event(2).latency); % skip first TR as there is often gradient noise still in the signal  
data = double(EEG.data(channels2keep, start:end) );

subplot(8,1,1), plot(data(1,1:1500))
subplot(8,1,2), plot(data(2,1:1500))
subplot(8,1,3), plot(data(3,1:1500))
subplot(8,1,4), plot(data(4,1:1500))
subplot(8,1,5), plot(data(5,1:1500))
subplot(8,1,6), plot(data(6,1:1500))
subplot(8,1,7), plot(data(7,1:1500))
subplot(8,1,8), plot(data(8,1:1500))
```

![Channels to derive cardiac signal from.](./images/channels4cardiacsignal.png)


7. Subtract mean from each channel.

```{.matlab}
data = data - mean(data,2)
```

8. Create mean left and right channels

```{.matlab}
Lmean = mean(data(1:4,:));
Rmean = mean(data(5:8,:));
```

9. Rereference channels
    - Take the difference of Lmean and Rmean

```{.matlab}
LR = Lmean - Rmean;
plot(LR(35000:40000))
```

![Rereferenced channels.](./images/rereferencedchannels.png)

10. Clean up output
    - **Step 10.1: LR mean Signal Conditioning/Filtering**
    Filter series 1: Low Bandwidth
        - 0.75 Hz 6th order Butterworth filter
        - 10 Hz 12th order Butterworth filter

```{.matlab}
% Generate filters
LBW.highpass = designfilt('highpassiir', 'FilterOrder', 6, ...
    'HalfPowerFrequency', 0.75, 'SampleRate', Fs)

LBW.lowpass = designfilt('lowpassiir', 'FilterOrder', 12, ...
    'HalfPowerFrequency', 10, 'SampleRate', Fs)

% Filter Lmean
temp = filtfilt(LBW.highpass, Lmean);
Lmean_LBW = filtfilt(LBW.lowpass, temp);

% Filter Rmean
temp = filtfilt(LBW.highpass, Rmean);
Rmean_LBW = filtfilt(LBW.lowpass, temp);

% Filter again (only with the difference this time)
temp = filtfilt(LBW.highpass, (Lmean_LBW - Rmean_LBW));
LR_LBW = filtfilt(LBW.lowpass, temp);
```

    Filter series 2: High Bandwidth
      - 0.75 Hz 6th order Butterworth filter
      - 50 Hz 12th order Butterworth filter

```{.matlab}
% Generate filters
HBW.highpass = designfilt('highpassiir', 'FilterOrder', 6, ...
    'HalfPowerFrequency', 0.75, 'SampleRate', Fs)

HBW.lowpass = designfilt('lowpassiir', 'FilterOrder', 12, ...
    'HalfPowerFrequency', 50, 'SampleRate', Fs)

% Filter Lmean
temp = filtfilt(HBW.highpass, Lmean);
Lmean_HBW = filtfilt(HBW.lowpass, temp);

% Filter Rmean
temp = filtfilt(HBW.highpass, Rmean);
Rmean_HBW = filtfilt(HBW.lowpass, temp);

% Filter again (only with the difference this time)
temp = filtfilt(HBW.highpass, (Lmean_HBW - Rmean_HBW));
LR_HBW = filtfilt(HBW.lowpass, temp);
```

TO BE CONTINUED ...
```


```

